# File: tools/py-shroud/engine/core.py (Final Architectural Fix)
import ast
import marshal
import base64
import time
import os
from datetime import datetime

from lib.sniper_env import env
from .obfuscators import string_encryptor, name_mangler

try:
    from rich.status import Status
except ImportError:
    class Status: # Fallback
        def __init__(self, message, **kwargs): self.message = message
        def __enter__(self): print(self.message)
        def __exit__(self, exc_type, exc_val, exc_tb): pass
        def update(self, message): print(message)

def shroud_file(input_file: str, output_file: str, level: int, banner_file: str) -> dict:
    stats = {
        'start_time': time.time(),
        'input_file': os.path.basename(input_file),
        'output_file': os.path.basename(output_file),
        'level': level, 'names_mangled': 'N/A', 'strings_encrypted': 'N/A'
    }

    try:
        status_context = Status("[cyan]Processing...", spinner="dots", transient=True)
    except TypeError:
        status_context = Status("[cyan]Processing...", spinner="dots")

    with status_context as status:
        try:
            # ... (Reading and parsing code remains the same) ...
            status.update("[cyan]Reading source file...")
            with open(input_file, 'r', encoding='utf-8') as f:
                source_code = f.read()
            stats['original_size'] = len(source_code)

            status.update("[cyan]Parsing code into Abstract Syntax Tree (AST)...")
            tree = ast.parse(source_code)

            # --- START: SIMPLIFIED LOGIC ---
            if level >= 3:
                status.update("[cyan]Level 3: Mangling names...")
                mangler = name_mangler.NameMangler()
                tree = mangler.visit(tree)
                stats['names_mangled'] = len(mangler.name_map)

            if level >= 2:
                status.update("[cyan]Level 2: Encrypting strings...")
                encryptor = string_encryptor.StringEncryptor()
                # The 'visit' method now handles both transformation AND injection.
                tree = encryptor.visit(tree)
                # The line below is now REMOVED as it's handled by the transformer.
                # tree.body.insert(0, encryptor.get_decryptor_node()) <--- REMOVED
                stats['strings_encrypted'] = encryptor.string_count
            # --- END: SIMPLIFIED LOGIC ---
            
            ast.fix_missing_locations(tree)

            # ... (The rest of the file remains exactly the same) ...
            status.update("[cyan]Generating obfuscated source code...")
            obfuscated_code = ast.unparse(tree)

            status.update("[cyan]Compiling to bytecode and marshalling...")
            compiled_code = compile(obfuscated_code, f'<{output_file}>', 'exec')
            marshalled_code = marshal.dumps(compiled_code)
            
            b64_marshalled_code = base64.b64encode(marshalled_code)

            loader_stub = f"import marshal, base64; exec(marshal.loads(base64.b64decode({repr(b64_marshalled_code)})))"
            
            final_content = ""
            if banner_file:
                try:
                    with open(banner_file, 'r', encoding='utf-8') as f:
                        final_content += f"\"\"\"\n{f.read().strip()}\n\"\"\"\n\n"
                except Exception as e:
                    env.log.error(f"Could not read banner file: {e}")

            level_map = {1: "Basic (Bytecode)", 2: "Standard (String Encryption)", 3: "Maximum (Name Mangling)"}
            level_desc = level_map.get(level, "Unknown")
            timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

            tool_banner = f"""# ==============================================================================
#  This file was obfuscated by SNIPER: py-shroud
#
#  Timestamp:        {timestamp}
#  Source File:      {stats['input_file']}
#  Protection Level: {level} ({level_desc})
#
#  WARNING: DO NOT EDIT THIS FILE MANUALLY.
#           ANY MODIFICATIONS WILL LIKELY BREAK THE SCRIPT.
# ==============================================================================

"""
            final_content += tool_banner
            final_content += loader_stub

            status.update("[cyan]Writing final shrouded file...")
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(final_content)
            stats['final_size'] = len(final_content)

        except FileNotFoundError:
            env.log.error(f"Input file not found: '{input_file}'")
            return None
        except SyntaxError as e:
            env.log.error(f"Invalid Python syntax in '{input_file}' on line {e.lineno}.")
            return None
        except Exception as e:
            env.log.error(f"An unexpected error occurred: {e}")
            return None

    stats['end_time'] = time.time()
    return stats
    